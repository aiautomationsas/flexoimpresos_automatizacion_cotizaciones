import streamlit as st
import pandas as pd
from typing import Optional, Dict, Any, List
import traceback
from datetime import datetime

from src.data.database import DBManager
from src.data.models import PoliticasEntrega
from src.utils.session_manager import SessionManager

def show_manage_policies():
    """Muestra la vista de gesti√≥n de pol√≠ticas de entrega (solo para administradores)"""
    
    # Verificar permisos de administrador
    if not SessionManager.verify_role(['administrador']):
        st.error("‚ùå Acceso denegado. Solo los administradores pueden gestionar pol√≠ticas de entrega.")
        return
    
    st.title("üìã Gesti√≥n de Pol√≠ticas de Entrega")
    st.markdown("Administre las pol√≠ticas de entrega para diferentes tipos de pedidos.")
    
    if 'db' not in st.session_state:
        st.error("Error: La conexi√≥n a la base de datos no est√° inicializada.")
        return
    
    db = st.session_state.db
    
    # Solo mostramos una pesta√±a para editar la pol√≠tica √∫nica
    st.markdown("### üìã Pol√≠tica de Entrega")
    show_edit_single_policy(db)

def show_policies_list(db: DBManager):
    """Muestra la lista de pol√≠ticas de entrega existentes"""
    st.markdown("### Pol√≠ticas de Entrega Existentes")
    
    try:
        # Verificar que el DBManager tiene los m√©todos necesarios
        if not hasattr(db, 'get_politicas_entrega'):
            st.error("‚ùå Error: El m√©todo 'get_politicas_entrega' no est√° disponible en DBManager.")
            st.info("üí° Soluci√≥n: Reinicie la aplicaci√≥n completamente para cargar los nuevos m√©todos.")
            return
        

        
        # Obtener todas las pol√≠ticas
        politicas = db.get_politicas_entrega()
        
        if not politicas:
            st.info("No hay pol√≠ticas de entrega configuradas en la base de datos.")
            st.info("üí° Puede crear nuevas pol√≠ticas usando la pesta√±a '‚ûï Crear Nueva'")
            return
        
        # Crear DataFrame para mostrar
        data = []
        for politica in politicas:
            data.append({
                'ID': politica.id,
                'Descripci√≥n': politica.descripcion,
                'Creado': politica.created_at.strftime('%d/%m/%Y %H:%M') if politica.created_at else 'N/A',
                'Actualizado': politica.updated_at.strftime('%d/%m/%Y %H:%M') if politica.updated_at else 'N/A'
            })
        
        st.success(f"‚úÖ Se encontraron {len(politicas)} pol√≠ticas de entrega")
        
        df = pd.DataFrame(data)
        
        # Mostrar tabla con opciones de acci√≥n
        st.dataframe(
            df,
            use_container_width=True,
            hide_index=True,
            column_config={
                "ID": st.column_config.NumberColumn("ID", width="small"),
                "Descripci√≥n": st.column_config.TextColumn("Descripci√≥n", width="large"),
                "Creado": st.column_config.TextColumn("Creado", width="medium"),
                "Actualizado": st.column_config.TextColumn("Actualizado", width="medium")
            }
        )
        
        # Mostrar detalles expandibles
        st.markdown("### Detalles de Pol√≠ticas")
        for politica in politicas:
            with st.expander(f"Pol√≠tica #{politica.id} - {politica.descripcion[:50]}..."):
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.text_area(
                        "Descripci√≥n completa:",
                        value=politica.descripcion,
                        height=150,
                        disabled=True,
                        key=f"view_desc_{politica.id}"
                    )
                with col2:
                    st.write("**Informaci√≥n:**")
                    st.write(f"**ID:** {politica.id}")
                    if politica.created_at:
                        st.write(f"**Creado:** {politica.created_at.strftime('%d/%m/%Y %H:%M')}")
                    if politica.updated_at:
                        st.write(f"**Actualizado:** {politica.updated_at.strftime('%d/%m/%Y %H:%M')}")
                    
                    # Bot√≥n para eliminar
                    if st.button("üóëÔ∏è Eliminar", key=f"delete_btn_{politica.id}", type="secondary"):
                        if delete_policy(db, politica.id):
                            st.success("‚úÖ Pol√≠tica eliminada exitosamente")
                            st.rerun()
                        else:
                            st.error("‚ùå Error al eliminar la pol√≠tica")
                            st.info("üí° La pol√≠tica puede estar en uso por cotizaciones existentes")
                
    except Exception as e:
        st.error(f"Error al cargar las pol√≠ticas: {str(e)}")
        traceback.print_exc()

def show_create_policy_form(db: DBManager):
    """Muestra el formulario para crear una nueva pol√≠tica"""
    st.markdown("### Crear Nueva Pol√≠tica de Entrega")
    
    with st.form("create_policy_form"):
        st.markdown("""
        **Formato sugerido para la descripci√≥n:**
        - Repeticiones: X d√≠as calendario desde el env√≠o de la OC
        - Cambios: X d√≠as calendario desde la aprobaci√≥n de la sherpa
        - Nuevas: X d√≠as calendario desde la aprobaci√≥n de la sherpa
        """)
        
        descripcion = st.text_area(
            "Descripci√≥n de la pol√≠tica:",
            height=200,
            placeholder="Ejemplo:\nRepeticiones: 8 d√≠as calendario desde el env√≠o de la OC\nCambios: 13 d√≠as calendario desde la aprobaci√≥n de la sherpa\nNuevas: 15 d√≠as calendario desde la aprobaci√≥n de la sherpa",
            help="Describa los tiempos de entrega para diferentes tipos de pedidos"
        )
        
        submitted = st.form_submit_button("Crear Pol√≠tica", type="primary")
        
        if submitted:
            if not descripcion.strip():
                st.error("La descripci√≥n no puede estar vac√≠a.")
                return
            
            try:
                # Crear la nueva pol√≠tica
                nueva_politica = PoliticasEntrega(
                    id=None,
                    descripcion=descripcion.strip(),
                    created_at=datetime.now(),
                    updated_at=datetime.now()
                )
                
                success = db.create_politica_entrega(nueva_politica)
                
                if success:
                    st.success("‚úÖ Pol√≠tica de entrega creada exitosamente.")
                    st.rerun()
                else:
                    st.error("‚ùå Error al crear la pol√≠tica de entrega.")
                    
            except Exception as e:
                st.error(f"Error al crear la pol√≠tica: {str(e)}")
                traceback.print_exc()

def show_edit_policy_form(db: DBManager):
    """Muestra el formulario para editar una pol√≠tica existente"""
    st.markdown("### Editar Pol√≠tica de Entrega")
    
    try:
        # Verificar que el DBManager tiene los m√©todos necesarios
        if not hasattr(db, 'get_politicas_entrega'):
            st.error("‚ùå Error: El m√©todo 'get_politicas_entrega' no est√° disponible en DBManager.")
            st.info("üí° Soluci√≥n: Reinicie la aplicaci√≥n completamente para cargar los nuevos m√©todos.")
            return
        
        # Obtener pol√≠ticas para el selector
        politicas = db.get_politicas_entrega()
        
        if not politicas:
            st.info("No hay pol√≠ticas disponibles para editar.")
            return
        
        # Selector de pol√≠tica
        opciones = {f"{p.id} - {p.descripcion[:50]}...": p.id for p in politicas}
        politica_seleccionada = st.selectbox(
            "Seleccionar pol√≠tica a editar:",
            options=list(opciones.keys()),
            key="edit_policy_selector"
        )
        
        if politica_seleccionada:
            politica_id = opciones[politica_seleccionada]
            politica = next((p for p in politicas if p.id == politica_id), None)
            
            if politica:
                with st.form("edit_policy_form"):
                    st.markdown(f"**Editando Pol√≠tica #{politica.id}**")
                    
                    descripcion_editada = st.text_area(
                        "Descripci√≥n:",
                        value=politica.descripcion,
                        height=200,
                        key=f"edit_desc_{politica.id}"
                    )
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        submitted = st.form_submit_button("Guardar Cambios", type="primary")
                    with col2:
                        cancel = st.form_submit_button("Cancelar", type="secondary")
                    
                    if submitted:
                        if not descripcion_editada.strip():
                            st.error("La descripci√≥n no puede estar vac√≠a.")
                            return
                        
                        try:
                            # Actualizar la pol√≠tica
                            print(f"Actualizando pol√≠tica {politica.id}...")
                            print(f"Descripci√≥n original: {politica.descripcion}")
                            print(f"Descripci√≥n editada: {descripcion_editada.strip()}")
                            
                            politica_actualizada = PoliticasEntrega(
                                id=politica.id,
                                descripcion=descripcion_editada.strip(),
                                created_at=politica.created_at,
                                updated_at=datetime.now()
                            )
                            
                            print(f"Objeto PoliticasEntrega creado: {vars(politica_actualizada)}")
                            success = db.update_politica_entrega(politica_actualizada)
                            
                            if success:
                                st.success("‚úÖ Pol√≠tica de entrega actualizada exitosamente.")
                                # Verificar que la actualizaci√≥n fue exitosa
                                politica_verificada = db.get_politica_entrega(politica.id)
                                if politica_verificada and politica_verificada.descripcion == descripcion_editada.strip():
                                    st.success("‚úÖ Verificaci√≥n exitosa - Los cambios se guardaron correctamente.")
                                    st.rerun()
                                else:
                                    st.warning("‚ö†Ô∏è La actualizaci√≥n parece haber fallado. Por favor, verifique los cambios.")
                            else:
                                st.error("‚ùå Error al actualizar la pol√≠tica de entrega.")
                                st.info("üí° Intente nuevamente o contacte al administrador del sistema.")
                                
                        except Exception as e:
                            st.error(f"Error al actualizar la pol√≠tica: {str(e)}")
                            traceback.print_exc()
                    
                    elif cancel:
                        st.rerun()
                        
    except Exception as e:
        st.error(f"Error al cargar las pol√≠ticas para edici√≥n: {str(e)}")
        traceback.print_exc()

def delete_policy(db: DBManager, politica_id: int) -> bool:
    """Elimina una pol√≠tica de entrega"""
    try:
        # Verificar si la pol√≠tica est√° siendo usada en cotizaciones
        cotizaciones_con_politica = db.get_cotizaciones_by_politica(politica_id)
        
        if cotizaciones_con_politica:
            st.warning(f"‚ö†Ô∏è No se puede eliminar la pol√≠tica porque est√° siendo utilizada en {len(cotizaciones_con_politica)} cotizaci√≥n(es).")
            return False
        
        # Eliminar la pol√≠tica
        success = db.delete_politica_entrega(politica_id)
        return success
        
    except Exception as e:
        st.error(f"Error al eliminar la pol√≠tica: {str(e)}")
        traceback.print_exc()
        return False

def show_policy_selection(db: DBManager, selected_policy_id: Optional[int] = None, key: str = "policy_selection") -> Optional[int]:
    """Muestra un selector de pol√≠ticas de entrega para usar en otros formularios"""
    try:
        # Verificar que el DBManager tiene los m√©todos necesarios
        if not hasattr(db, 'get_politicas_entrega'):
            st.error("‚ùå Error: El m√©todo 'get_politicas_entrega' no est√° disponible en DBManager.")
            st.info("üí° Soluci√≥n: Reinicie la aplicaci√≥n completamente para cargar los nuevos m√©todos.")
            return None
        
        politicas = db.get_politicas_entrega()
        
        if not politicas:
            st.info("No hay pol√≠ticas de entrega configuradas.")
            return None
        
        # Crear opciones para el selector
        opciones = [(None, "Sin pol√≠tica de entrega")]
        opciones.extend([(p.id, f"Pol√≠tica #{p.id} - {p.descripcion[:50]}...") for p in politicas])
        
        # Encontrar el √≠ndice de la pol√≠tica seleccionada
        selected_index = 0
        for i, (policy_id, _) in enumerate(opciones):
            if policy_id == selected_policy_id:
                selected_index = i
                break
        
        selected_option = st.selectbox(
            "Pol√≠tica de Entrega:",
            options=opciones,
            index=selected_index,
            format_func=lambda x: x[1],
            key=key
        )
        
        return selected_option[0] if selected_option else None
        
    except Exception as e:
        st.error(f"Error al cargar las pol√≠ticas de entrega: {str(e)}")
        return None

def show_edit_single_policy(db: DBManager):
    """Muestra el formulario para editar la √∫nica pol√≠tica de entrega"""
    try:
        # Verificar que el DBManager tiene los m√©todos necesarios
        if not hasattr(db, 'get_politica_entrega'):
            st.error("‚ùå Error: El m√©todo 'get_politica_entrega' no est√° disponible en DBManager.")
            st.info("üí° Soluci√≥n: Reinicie la aplicaci√≥n completamente para cargar los nuevos m√©todos.")
            return
        
        # Obtener la pol√≠tica √∫nica (siempre ID=1)
        politica = db.get_politica_entrega(1)
        
        if politica:
            with st.form("edit_single_policy_form"):
                st.markdown("**Editar Pol√≠tica de Entrega**")
                
                descripcion_editada = st.text_area(
                    "Descripci√≥n:",
                    value=politica.descripcion,
                    height=200,
                    help="Esta pol√≠tica se aplicar√° a todas las cotizaciones. Use saltos de l√≠nea para separar diferentes puntos."
                )
                
                col1, col2 = st.columns(2)
                with col1:
                    submitted = st.form_submit_button("Guardar Cambios", type="primary")
                
                if submitted:
                    if not descripcion_editada.strip():
                        st.error("La descripci√≥n no puede estar vac√≠a.")
                        return
                    
                    try:
                        # Actualizar la pol√≠tica
                        print(f"Actualizando pol√≠tica {politica.id}...")
                        print(f"Descripci√≥n original: {politica.descripcion}")
                        print(f"Descripci√≥n editada: {descripcion_editada.strip()}")
                        
                        politica_actualizada = PoliticasEntrega(
                            id=politica.id,
                            descripcion=descripcion_editada.strip(),
                            created_at=politica.created_at,
                            updated_at=datetime.now()
                        )
                        
                        print(f"Objeto PoliticasEntrega creado: {vars(politica_actualizada)}")
                        success = db.update_politica_entrega(politica_actualizada)
                        
                        if success:
                            st.success("‚úÖ Pol√≠tica de entrega actualizada exitosamente.")
                            st.rerun()
                        else:
                            st.error("‚ùå Error al actualizar la pol√≠tica de entrega.")
                            st.info("üí° Intente nuevamente o contacte al administrador del sistema.")
                            
                    except Exception as e:
                        st.error(f"Error al actualizar la pol√≠tica: {str(e)}")
                        traceback.print_exc()
        else:
            # Si no existe la pol√≠tica, mostrar formulario para crearla
            with st.form("create_single_policy_form"):
                st.markdown("**Crear Pol√≠tica de Entrega**")
                st.info("No existe una pol√≠tica de entrega. Por favor, cree una.")
                
                descripcion = st.text_area(
                    "Descripci√≥n:",
                    height=200,
                    placeholder="Ejemplo:\nRepeticiones: 8 d√≠as calendario desde el env√≠o de la OC\nCambios: 13 d√≠as calendario desde la aprobaci√≥n de la sherpa\nNuevas: 15 d√≠as calendario desde la aprobaci√≥n de la sherpa",
                    help="Esta pol√≠tica se aplicar√° a todas las cotizaciones. Use saltos de l√≠nea para separar diferentes puntos."
                )
                
                submitted = st.form_submit_button("Crear Pol√≠tica", type="primary")
                
                if submitted:
                    if not descripcion.strip():
                        st.error("La descripci√≥n no puede estar vac√≠a.")
                        return
                    
                    try:
                        # Crear la nueva pol√≠tica
                        nueva_politica = PoliticasEntrega(
                            id=1,  # Siempre ID=1
                            descripcion=descripcion.strip(),
                            created_at=datetime.now(),
                            updated_at=datetime.now()
                        )
                        
                        success = db.create_politica_entrega(nueva_politica)
                        
                        if success:
                            st.success("‚úÖ Pol√≠tica de entrega creada exitosamente.")
                            st.rerun()
                        else:
                            st.error("‚ùå Error al crear la pol√≠tica de entrega.")
                            
                    except Exception as e:
                        st.error(f"Error al crear la pol√≠tica: {str(e)}")
                        traceback.print_exc()
    except Exception as e:
        st.error(f"Error al cargar la pol√≠tica de entrega: {str(e)}")
        traceback.print_exc()

def show_policy_details(politica_id: int, db: DBManager):
    """Muestra los detalles de una pol√≠tica de entrega espec√≠fica"""
    try:
        # Verificar que el DBManager tiene los m√©todos necesarios
        if not hasattr(db, 'get_politica_entrega'):
            st.error("‚ùå Error: El m√©todo 'get_politica_entrega' no est√° disponible en DBManager.")
            st.info("üí° Soluci√≥n: Reinicie la aplicaci√≥n completamente para cargar los nuevos m√©todos.")
            return
        
        politica = db.get_politica_entrega(politica_id)
        if politica:
            with st.expander(f"üìã Pol√≠tica de Entrega #{politica.id}", expanded=True):
                st.text_area(
                    "Descripci√≥n:",
                    value=politica.descripcion,
                    height=100,
                    disabled=True,
                    key=f"policy_details_{politica.id}"
                )
        else:
            st.warning("Pol√≠tica de entrega no encontrada.")
    except Exception as e:
        st.error(f"Error al cargar los detalles de la pol√≠tica: {str(e)}")
